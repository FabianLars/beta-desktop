name: "publish"
on:
  workflow_dispatch:
  push:

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short
  # RUSTFLAGS: '-D warnings -W unreachable-pub -W rust-2021-compatibility'
  RUSTFLAGS: "-W unreachable-pub -W rust-2021-compatibility"

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        arch: [aarch64, armv7l]
        include:
          - arch: aarch64
            cpu: cortex-a72
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bookworm.img.xz
            deb: arm64
            rpm: aarch64
            appimage: aarch64
          - arch: armv7l
            cpu: cortex-a53
            deb: armhfp
            rpm: arm
            appimage: armhf
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv7-Bookworm.img.xz

    steps:
      - uses: actions/checkout@v3

      - name: Setup image cache
        uses: actions/cache@v4
        id: cache
        with:
          path: $RUNNER_TEMP/cache.img
          key: image-cache-key-1
          save-always: true

      - name: Setup image
        uses: pguyot/arm-runner-action@v2.6.5
        id: install_deps
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 2048
          optimize_image: no
          commands: |
            # Prevent Rust from complaining about $HOME not matching eid home
            export HOME=/root

            # Workaround to CI worker being stuck on Updating crates.io index
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

            # Install setup prerequisites
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs

      - name: Move and rename image with dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mv ${{ steps.install_deps.outputs.image }} $RUNNER_TEMP/cache.img

      - name: Cache rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Build app
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: file://$RUNNER_TEMP/cache.img
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          commands: |
            # Install frontend dependencies
            npm install

            # Build the application
            npm run tauri build -- --verbose

            ls src-tauri/target/release/bundle/deb
            ls src-tauri/target/release/bundle/rpm
            ls src-tauri/target/release/bundle/appimage

      # TODO: Combine this with the basic workflow and upload the files to the Release.
      - name: Upload deb bundle
        uses: actions/upload-artifact@v3
        with:
          name: Debian Bundle
          path: ${{ github.workspace }}/src-tauri/target/release/bundle/deb/appname_0.0.0_${{ matrix.deb }}.deb

      - name: Upload rpm bundle
        uses: actions/upload-artifact@v3
        with:
          name: RPM Bundle
          path: ${{ github.workspace }}/src-tauri/target/release/bundle/rpm/appname_0.0.0-1_${{ matrix.rpm }}.rpm

      - name: Upload appimage bundle
        uses: actions/upload-artifact@v3
        with:
          name: AppImage Bundle
          path: ${{ github.workspace }}/src-tauri/target/release/bundle/appimage/appname_0.0.0-_${{ matrix.appimage }}.AppImage
